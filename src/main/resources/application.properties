# Address of the server.
addressService.address=http://localhost:8080/

#Datenbankdefinition, fuer persistierung. Jeweilliger Befehl wurde von h2 sheet-seite geholt, die anbindung an
#Spring muss dann separat gegooglet werden (mit spring.datasource...)

#--> Legt eine test.mv.db-Datei an, welche die Daten enthählt. Führt man die enthaltene .jar-Datei aus, startet eine
#web-Anwendung. Dort wählt man dann auch unter jdbc-url den unteren Pfad und er lädt die Datenbank (Datei befindet
#sich ja unter diesem Namen im Projekt und .jar-File ja auch)
spring.datasource.url=jdbc:h2:./test

#Muss gemacht werder, da default-wert immer löcschen der Datenbank ist. So sollte komplettes persistieren klappen.
#Standard ist am Ende der Anwendung drop-Befehl ausführen.
spring.jpa.hibernate.ddl-auto=update

#Datenbank muss nach jeder ausführung gelöscht werden. Mit diesem Befehl wird sie gedroppt und neu gebaut
#spring.jpa.hibernate.ddl-auto=create-drop

spring.datasource.platform=h2

#Ein Hash-Wert, generiert mit hashgenerator.de
#Wir "wuerzen" quasi unser gehastes PW, mit einem weiteren random-Hashwert, dem salt-Wert
#Satz, hinter Hash: HalloLiebeBunteSchoeneWeiteWelt
authenticationService.salt=6479425627c864e40aa4fdfb3a2d8b91905efa809648fd581c690b46c4da67cbc6b363842d713a03ed520a6cb51a6f1d17295bfdb1b203391be35a5c327e9da4


authenticationService.jwt.secret=Severus Snape was a good guy!

# Ressourcen-Directory, für das frontend;
# Der Pfad des Commits funktioniert nicht, es muss für Windows angepasst werden, gemäß des Kommentars
#spring.resources.static-locations=file:./src/main/frontend/
spring.resources.static-locations=file:./src/main/resources/public/